#! /bin/bash

#
# git-gh-diff-url - generate github refs diff url (github.com/user/repo/compare/...).
#
# USAGE:
#     * git-gh-diff-url --left [LEFT] --right [RIGHT] [OPTIONS]
#     *     [-l|--left]  [hash|tag|branch]     # Left side git ref used for compare. (default: remote oring default branch)
#     *     [--la|--left-alias]  [alias]       # Left side git ref alias. (default: use --left value)
#     *     [-r|--right] [hash|tag|branch]     # Right side git ref used for compare. (default: current branch)
#     *     [--ra|--right-alias] [alias]       # Right side git ref alias. (default: use --right value)
#     *     [-o|--refs-mode] [r|l|lr|none]     # Specify url ref hash mode. r or l or lr or rl(default: l)
#     *     [--version]                        # Show version.
#     *     [-v|--verbose]                     # Verbose mode on.
#     *     [-s|--simple]                      # Simple mode on.
#     *     [-b|--browser]                     # open create url to `git web--browse` cmd.
#     *     [-p|--browser-option] [OPTION]     # Specify `git web--browse` option.
#     *     [-t|--output] [text|html|markdown] # Specify output text type. (default: markdown)
#
# ENVIRONMENTS:
#     GIT_GH_DIFF_URL_DEFAULT_BROWSER_OPTION   # Default use `--browser-option` option. (default: "")
#     GIT_GH_DIFF_URL_DEFAULT_REFS_MODE        # Default use `--refs-mode` option. (default: "l")
#     GIT_GH_DIFF_URL_DEFAULT_OUTPUT_TEXT_TYPE # Default use `--output` option. (default: "markdown")
#
# MIT License
#
# Copyright (c) 2021 Hiroshi IKEGAMI
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

export GIT_GH_DIFF_URL_DEFAULT_BROWSER_OPTION="${GIT_GH_DIFF_URL_DEFAULT_BROWSER_OPTION:-""}"
export GIT_GH_DIFF_URL_DEFAULT_REFS_MODE="${GIT_GH_DIFF_URL_DEFAULT_REFS_MODE:-"l"}"
export GIT_GH_DIFF_URL_DEFAULT_OUTPUT_TEXT_TYPE=${GIT_GH_DIFF_URL_DEFAULT_OUTPUT_TEXT_TYPE:-"markdown"}

git::gh:d:u::help() {
    cat << HELP
USAGE:
    * git-gh-diff-url --left [LEFT] --right [RIGHT]
    *     [-l|--left]  [hash|tag|branch]     # Left side git ref used for compare. (default: remote oring default branch)
    *     [--la|--left-alias]  [alias]       # Left side git ref alias. (default: use --left value)
    *     [-r|--right] [hash|tag|branch]     # Right side git ref used for compare. (default: current branch)
    *     [--ra|--right-alias] [alias]       # Right side git ref alias. (default: use --right value)
    *     [-o|--refs-mode] [r|l|lr|none]     # Specify url ref hash mode. r or l or lr or rl or none. (default: l)
    *     [--version]                        # Show version.
    *     [-v|--verbose]                     # Verbose mode on.
    *     [-s|--simple]                      # Simple mode on.
    *     [-b|--browser]                     # open create url to \`git web--browse\` cmd.
    *     [-p|--browser-option] [OPTION]     # Specify \`git web--browse\` option.
    *     [-t|--output] [text|html|markdown] # Specify output text type. (default: markdown)
HELP
}

git::gh:d:u::version() {
    echo "v1.1.3"
}

git::gh:d:u::browser() {
    local url=$1
    git web--browse "${__CONFIG_BROWSER_OPTION:-${GIT_GH_DIFF_URL_DEFAULT_BROWSER_OPTION}}" "${url}"
}

git::gh:d:u::branch_name() {
    echo "($(basename $(git rev-parse --show-toplevel))) $(git::gh:d:u::right)"
}

git::gh:d:u::head_log() {
    local branch="$1"
    git log ${branch} --decorate -1
}

git::gh:d:u::head_hash() {
    local branch="$1"
    git log ${branch} --pretty=%H -1
}

git::gh:d:u::default_branch() {
    #git remote set-head origin --auto
    git symbolic-ref refs/remotes/origin/HEAD | awk -F'[/]' '{print $NF}'
}

git::gh:d:u::current_branch() {
    echo "$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"
}

git::gh:d:u::gh_repository_id() {
    echo $(git remote -v | \
        grep fetch | \
        perl -pe \
        's/^origin\s*(?:git\@github\.com:|https:\/\/github\.com\/)(.+)\/(.+?)(?:\.git)?\s+\(fetch\)\s*$/$1\/$2/xo'
    )
}

git::gh:d:u::diff_url() {
    local repo_url=$1
    local left=$2
    local right=$3
    echo https://github.com/${repo_url}/compare/${left}...${right}
}

git::gh:d:u::left_name() {
    if [[ -n ${__CONFIG_LEFT_ALIAS} ]];then
        echo "${__CONFIG_LEFT_ALIAS}"
    else
        git::gh:d:u::left
    fi
}

git::gh:d:u::right_name() {
    if [[ -n ${__CONFIG_RIGHT_ALIAS} ]];then
        echo "${__CONFIG_RIGHT_ALIAS}"
    else
        git::gh:d:u::right
    fi
}

git::gh:d:u::left() {
    if [[ -n ${__CONFIG_LEFT} ]];then
        echo "${__CONFIG_LEFT}"
    else
        git::gh:d:u::default_branch
    fi
}

git::gh:d:u::right() {
    if [[ -n ${__CONFIG_RIGHT} ]];then
        echo "${__CONFIG_RIGHT}"
    else
        git::gh:d:u::current_branch
    fi
}

git::gh:d:u::output_template() {
    local _mode=$1
    case "${_mode}" in
        start)
            case "${GIT_GH_DIFF_URL_DEFAULT_OUTPUT_TEXT_TYPE}" in
                text)
                    # do nothing.
                    :
                    ;;
                html)
                    echo '<pre>'
                    ;;
                markdown)
                    echo '```'
                    ;;
            esac
            ;;
        end)
            case "${GIT_GH_DIFF_URL_DEFAULT_OUTPUT_TEXT_TYPE}" in
                text)
                    # do nothing.
                    :
                    ;;
                html)
                    echo '</pre>'
                    ;;
                markdown)
                    echo '```'
                    ;;
            esac
            ;;
    esac
}

git::gh:d:u::main() {
    _repo_url="$(git::gh:d:u::gh_repository_id)"
    _left="$(git::gh:d:u::left)"
    _right="$(git::gh:d:u::right)"
    case "${__CONFIG_REFS_MODE:-"${GIT_GH_DIFF_URL_DEFAULT_REFS_MODE}"}" in
        l)
            _left=$(git::gh:d:u::head_hash "${_left}")
            ;;
        r)
            _right=$(git::gh:d:u::head_hash "${_right}")
            ;;
        lr|rl)
            _right=$(git::gh:d:u::head_hash "${_right}")
            _left=$(git::gh:d:u::head_hash "${_left}")
            ;;
        none)
            _left="$(git::gh:d:u::left)"
            _right="$(git::gh:d:u::right)"
            ;;
    esac

    echo "$(git::gh:d:u::branch_name)"
    local diff_url=$(git::gh:d:u::diff_url "${_repo_url}" "${_left}" "${_right}")
    echo "${diff_url}"
    echo
    git::gh:d:u::output_template start
    if [[ ${__CONFIG_VERBOSE} = 1 ]] && [[ ${__CONFIG_SIMPLE} != 1 ]];then
        echo "left side:"
        echo "($(git::gh:d:u::left_name))"
        git::gh:d:u::head_log $(git::gh:d:u::left)
        echo
        echo "right side:"
        echo "($(git::gh:d:u::right_name))"
        git::gh:d:u::head_log $(git::gh:d:u::right)
    else
        echo "left side:"
        echo "$(git::gh:d:u::left_name): $(git::gh:d:u::head_hash "$(git::gh:d:u::left)")"
        echo
        echo "right side:"
        echo "$(git::gh:d:u::right_name): $(git::gh:d:u::head_hash "$(git::gh:d:u::right)")"
    fi
    git::gh:d:u::output_template end
    echo

    [[ ${__CONFIG_BROWSER} = 1 ]] && git::gh:d:u::browser "${diff_url}"
}




optspec=":-:r:l:o:t:p:vshb"
while getopts "$optspec" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                help)
                    git::gh:d:u::help; exit 1
                    ;;
                left)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    __CONFIG_LEFT="${val}"
                    ;;
                la|left-alias)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    __CONFIG_LEFT_ALIAS="${val}"
                    ;;
                right)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    __CONFIG_RIGHT="${val}"
                    ;;
                ra|right-alias)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    __CONFIG_RIGHT_ALIAS="${val}"
                    ;;
                refs-mode)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    if [[ ${val} =~ ^(r|l|lr|rl|none)$ ]]; then
                        __CONFIG_REFS_MODE="${val}"
                    else
                        echo "Unknown option --refs-mode ${val}" >&2
                        exit 1
                    fi
                    ;;
                version)
                    git::gh:d:u::version; exit 1
                    ;;
                verbose)
                    __CONFIG_VERBOSE=1
                    ;;
                simple)
                    __CONFIG_SIMPLE=1
                    ;;
                browser)
                    __CONFIG_BROWSER=1
                    ;;
                browser-optoin)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    __CONFIG_BROWSER_OPTION="${val}"
                    ;;
                output)
                    val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    if [[ ${val} =~ ^(text|html|markdown)$ ]]; then
                        GIT_GH_DIFF_URL_DEFAULT_OUTPUT_TEXT_TYPE="${val}"
                    else
                        echo "Unknown option --output ${val}" >&2
                        exit 1
                    fi
                    ;;
                *)
                    if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
                        echo "Unknown option --${OPTARG}" >&2
                    fi
                    exit 1
                    ;;
            esac;;
        h)
            git::gh:d:u::help; exit 1
            ;;
        l)
            __CONFIG_LEFT="${OPTARG}"
            ;;
        r)
            __CONFIG_RIGHT="${OPTARG}"
            ;;
        o)
            if [[ ${OPTARG} =~ ^(r|l|lr|rl|none)$ ]]; then
                __CONFIG_REFS_MODE="${OPTARG}"
            else
                echo "Unknown option -o ${OPTARG}" >&2
                exit 1
            fi
            ;;
        v)
            __CONFIG_VERBOSE=1
            ;;
        s)
            __CONFIG_SIMPLE=1
            ;;
        b)
            __CONFIG_BROWSER=1
            ;;
        p)
            __CONFIG_BROWSER_OPTION="${OPTARG}"
            ;;
        t)
            if [[ ${OPTARG} =~ ^(text|html|markdown)$ ]]; then
                GIT_GH_DIFF_URL_DEFAULT_OUTPUT_TEXT_TYPE="${OPTARG}"
            else
                echo "Unknown option -t ${OPTARG}" >&2
                exit 1
            fi
            ;;
        *)
            if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            exit 1
            ;;
    esac
done

git::gh:d:u::main && exit 0

